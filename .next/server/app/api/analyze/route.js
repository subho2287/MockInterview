"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(() => {
var exports = {};
exports.id = "app/api/analyze/route";
exports.ids = ["app/api/analyze/route"];
exports.modules = {

/***/ "next/dist/compiled/next-server/app-route.runtime.dev.js":
/*!**************************************************************************!*\
  !*** external "next/dist/compiled/next-server/app-route.runtime.dev.js" ***!
  \**************************************************************************/
/***/ ((module) => {

module.exports = require("next/dist/compiled/next-server/app-route.runtime.dev.js");

/***/ }),

/***/ "(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!":

  !*** ./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D! ***!

/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   headerHooks: () => (/* binding */ headerHooks),\n/* harmony export */   originalPathname: () => (/* binding */ originalPathname),\n/* harmony export */   patchFetch: () => (/* binding */ patchFetch),\n/* harmony export */   requestAsyncStorage: () => (/* binding */ requestAsyncStorage),\n/* harmony export */   routeModule: () => (/* binding */ routeModule),\n/* harmony export */   serverHooks: () => (/* binding */ serverHooks),\n/* harmony export */   staticGenerationAsyncStorage: () => (/* binding */ staticGenerationAsyncStorage),\n/* harmony export */   staticGenerationBailout: () => (/* binding */ staticGenerationBailout)\n/* harmony export */ });\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/dist/server/future/route-modules/app-route/module.compiled */ \"(rsc)/./node_modules/next/dist/server/future/route-modules/app-route/module.compiled.js\");\n/* harmony import */ var next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/future/route-kind */ \"(rsc)/./node_modules/next/dist/server/future/route-kind.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! next/dist/server/lib/patch-fetch */ \"(rsc)/./node_modules/next/dist/server/lib/patch-fetch.js\");\n/* harmony import */ var next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var C_AI_Projects_Windsurf_AIInterviewer_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./src/app/api/analyze/route.ts */ \"(rsc)/./src/app/api/analyze/route.ts\");\n\n\n\n\n// We inject the nextConfigOutput here so that we can use them in the route\n// module.\nconst nextConfigOutput = \"\"\nconst routeModule = new next_dist_server_future_route_modules_app_route_module_compiled__WEBPACK_IMPORTED_MODULE_0__.AppRouteRouteModule({\n    definition: {\n        kind: next_dist_server_future_route_kind__WEBPACK_IMPORTED_MODULE_1__.RouteKind.APP_ROUTE,\n        page: \"/api/analyze/route\",\n        pathname: \"/api/analyze\",\n        filename: \"route\",\n        bundlePath: \"app/api/analyze/route\"\n    },\n    resolvedPagePath: \"C:\\\\AI Projects\\\\Windsurf\\\\AIInterviewer\\\\src\\\\app\\\\api\\\\analyze\\\\route.ts\",\n    nextConfigOutput,\n    userland: C_AI_Projects_Windsurf_AIInterviewer_src_app_api_analyze_route_ts__WEBPACK_IMPORTED_MODULE_3__\n});\n// Pull out the exports that we need to expose from the module. This should\n// be eliminated when we've moved the other routes to the new format. These\n// are used to hook into the route.\nconst { requestAsyncStorage, staticGenerationAsyncStorage, serverHooks, headerHooks, staticGenerationBailout } = routeModule;\nconst originalPathname = \"/api/analyze/route\";\nfunction patchFetch() {\n    return (0,next_dist_server_lib_patch_fetch__WEBPACK_IMPORTED_MODULE_2__.patchFetch)({\n        serverHooks,\n        staticGenerationAsyncStorage\n    });\n}\n\n\n//# sourceMappingURL=app-route.js.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvbmV4dC9kaXN0L2J1aWxkL3dlYnBhY2svbG9hZGVycy9uZXh0LWFwcC1sb2FkZXIuanM/bmFtZT1hcHAlMkZhcGklMkZhbmFseXplJTJGcm91dGUmcGFnZT0lMkZhcGklMkZhbmFseXplJTJGcm91dGUmYXBwUGF0aHM9JnBhZ2VQYXRoPXByaXZhdGUtbmV4dC1hcHAtZGlyJTJGYXBpJTJGYW5hbHl6ZSUyRnJvdXRlLnRzJmFwcERpcj1DJTNBJTVDQUklMjBQcm9qZWN0cyU1Q1dpbmRzdXJmJTVDQUlJbnRlcnZpZXdlciU1Q3NyYyU1Q2FwcCZwYWdlRXh0ZW5zaW9ucz10c3gmcGFnZUV4dGVuc2lvbnM9dHMmcGFnZUV4dGVuc2lvbnM9anN4JnBhZ2VFeHRlbnNpb25zPWpzJnJvb3REaXI9QyUzQSU1Q0FJJTIwUHJvamVjdHMlNUNXaW5kc3VyZiU1Q0FJSW50ZXJ2aWV3ZXImaXNEZXY9dHJ1ZSZ0c2NvbmZpZ1BhdGg9dHNjb25maWcuanNvbiZiYXNlUGF0aD0mYXNzZXRQcmVmaXg9Jm5leHRDb25maWdPdXRwdXQ9JnByZWZlcnJlZFJlZ2lvbj0mbWlkZGxld2FyZUNvbmZpZz1lMzAlM0QhIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQXNHO0FBQ3ZDO0FBQ2M7QUFDMEI7QUFDdkc7QUFDQTtBQUNBO0FBQ0Esd0JBQXdCLGdIQUFtQjtBQUMzQztBQUNBLGNBQWMseUVBQVM7QUFDdkI7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFlBQVk7QUFDWixDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0EsUUFBUSx1R0FBdUc7QUFDL0c7QUFDQTtBQUNBLFdBQVcsNEVBQVc7QUFDdEI7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUM2Sjs7QUFFN0oiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9haS1pbnRlcnZpZXdlci8/ZjViMSJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBBcHBSb3V0ZVJvdXRlTW9kdWxlIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLW1vZHVsZXMvYXBwLXJvdXRlL21vZHVsZS5jb21waWxlZFwiO1xuaW1wb3J0IHsgUm91dGVLaW5kIH0gZnJvbSBcIm5leHQvZGlzdC9zZXJ2ZXIvZnV0dXJlL3JvdXRlLWtpbmRcIjtcbmltcG9ydCB7IHBhdGNoRmV0Y2ggYXMgX3BhdGNoRmV0Y2ggfSBmcm9tIFwibmV4dC9kaXN0L3NlcnZlci9saWIvcGF0Y2gtZmV0Y2hcIjtcbmltcG9ydCAqIGFzIHVzZXJsYW5kIGZyb20gXCJDOlxcXFxBSSBQcm9qZWN0c1xcXFxXaW5kc3VyZlxcXFxBSUludGVydmlld2VyXFxcXHNyY1xcXFxhcHBcXFxcYXBpXFxcXGFuYWx5emVcXFxccm91dGUudHNcIjtcbi8vIFdlIGluamVjdCB0aGUgbmV4dENvbmZpZ091dHB1dCBoZXJlIHNvIHRoYXQgd2UgY2FuIHVzZSB0aGVtIGluIHRoZSByb3V0ZVxuLy8gbW9kdWxlLlxuY29uc3QgbmV4dENvbmZpZ091dHB1dCA9IFwiXCJcbmNvbnN0IHJvdXRlTW9kdWxlID0gbmV3IEFwcFJvdXRlUm91dGVNb2R1bGUoe1xuICAgIGRlZmluaXRpb246IHtcbiAgICAgICAga2luZDogUm91dGVLaW5kLkFQUF9ST1VURSxcbiAgICAgICAgcGFnZTogXCIvYXBpL2FuYWx5emUvcm91dGVcIixcbiAgICAgICAgcGF0aG5hbWU6IFwiL2FwaS9hbmFseXplXCIsXG4gICAgICAgIGZpbGVuYW1lOiBcInJvdXRlXCIsXG4gICAgICAgIGJ1bmRsZVBhdGg6IFwiYXBwL2FwaS9hbmFseXplL3JvdXRlXCJcbiAgICB9LFxuICAgIHJlc29sdmVkUGFnZVBhdGg6IFwiQzpcXFxcQUkgUHJvamVjdHNcXFxcV2luZHN1cmZcXFxcQUlJbnRlcnZpZXdlclxcXFxzcmNcXFxcYXBwXFxcXGFwaVxcXFxhbmFseXplXFxcXHJvdXRlLnRzXCIsXG4gICAgbmV4dENvbmZpZ091dHB1dCxcbiAgICB1c2VybGFuZFxufSk7XG4vLyBQdWxsIG91dCB0aGUgZXhwb3J0cyB0aGF0IHdlIG5lZWQgdG8gZXhwb3NlIGZyb20gdGhlIG1vZHVsZS4gVGhpcyBzaG91bGRcbi8vIGJlIGVsaW1pbmF0ZWQgd2hlbiB3ZSd2ZSBtb3ZlZCB0aGUgb3RoZXIgcm91dGVzIHRvIHRoZSBuZXcgZm9ybWF0LiBUaGVzZVxuLy8gYXJlIHVzZWQgdG8gaG9vayBpbnRvIHRoZSByb3V0ZS5cbmNvbnN0IHsgcmVxdWVzdEFzeW5jU3RvcmFnZSwgc3RhdGljR2VuZXJhdGlvbkFzeW5jU3RvcmFnZSwgc2VydmVySG9va3MsIGhlYWRlckhvb2tzLCBzdGF0aWNHZW5lcmF0aW9uQmFpbG91dCB9ID0gcm91dGVNb2R1bGU7XG5jb25zdCBvcmlnaW5hbFBhdGhuYW1lID0gXCIvYXBpL2FuYWx5emUvcm91dGVcIjtcbmZ1bmN0aW9uIHBhdGNoRmV0Y2goKSB7XG4gICAgcmV0dXJuIF9wYXRjaEZldGNoKHtcbiAgICAgICAgc2VydmVySG9va3MsXG4gICAgICAgIHN0YXRpY0dlbmVyYXRpb25Bc3luY1N0b3JhZ2VcbiAgICB9KTtcbn1cbmV4cG9ydCB7IHJvdXRlTW9kdWxlLCByZXF1ZXN0QXN5bmNTdG9yYWdlLCBzdGF0aWNHZW5lcmF0aW9uQXN5bmNTdG9yYWdlLCBzZXJ2ZXJIb29rcywgaGVhZGVySG9va3MsIHN0YXRpY0dlbmVyYXRpb25CYWlsb3V0LCBvcmlnaW5hbFBhdGhuYW1lLCBwYXRjaEZldGNoLCAgfTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YXBwLXJvdXRlLmpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!\n");

/***/ }),

/***/ "(rsc)/./src/app/api/analyze/route.ts":
/*!**************************************!*\
  !*** ./src/app/api/analyze/route.ts ***!
  \**************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   POST: () => (/* binding */ POST)\n/* harmony export */ });\n/* harmony import */ var _utils_groq__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/utils/groq */ \"(rsc)/./src/utils/groq.ts\");\n/* harmony import */ var next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! next/dist/server/web/exports/next-response */ \"(rsc)/./node_modules/next/dist/server/web/exports/next-response.js\");\n\n\nasync function POST(request) {\n    try {\n        const body = await request.json();\n        const { question, response, expectedTopics, questionType, correctOption, explanation } = body;\n        console.log(\"Analyze API received:\", {\n            questionType,\n            expectedTopics,\n            responseLength: response?.length,\n            hasCorrectOption: !!correctOption\n        });\n        if (!question || !response || !expectedTopics || !questionType) {\n            console.error(\"Missing required fields:\", {\n                question: !!question,\n                response: !!response,\n                expectedTopics: !!expectedTopics,\n                questionType: !!questionType\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n                error: \"Missing required fields\"\n            }, {\n                status: 400\n            });\n        }\n        // For MCQ questions, directly compare with correct answer\n        if (questionType.toLowerCase() === \"mcq\") {\n            if (!correctOption) {\n                console.error(\"Missing correct option for MCQ\");\n                return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n                    error: \"Missing correct option for MCQ\"\n                }, {\n                    status: 400\n                });\n            }\n            const isCorrect = response.toUpperCase() === correctOption.toUpperCase();\n            const mcqAnalysis = {\n                score: isCorrect ? 10 : 0,\n                feedback: isCorrect ? `Correct! ${explanation || \"\"}` : `Incorrect. The correct answer is ${correctOption}. ${explanation || \"\"}`,\n                coveredTopics: isCorrect ? expectedTopics : [],\n                missingTopics: isCorrect ? [] : expectedTopics\n            };\n            console.log(\"MCQ Analysis:\", mcqAnalysis);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json(mcqAnalysis);\n        }\n        // For other question types, use GROQ API\n        try {\n            console.log(\"Analyzing response with GROQ...\");\n            const analysis = await (0,_utils_groq__WEBPACK_IMPORTED_MODULE_0__.analyzeResponse)(question, response, expectedTopics);\n            console.log(\"GROQ Analysis result:\", analysis);\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json(analysis);\n        } catch (error) {\n            console.error(\"Error analyzing response:\", error);\n            console.error(\"Error details:\", {\n                name: error instanceof Error ? error.name : \"Unknown\",\n                message: error instanceof Error ? error.message : \"Unknown error\",\n                stack: error instanceof Error ? error.stack : undefined\n            });\n            return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n                error: \"Failed to analyze response\",\n                details: error instanceof Error ? error.message : \"Unknown error\"\n            }, {\n                status: 500\n            });\n        }\n    } catch (error) {\n        console.error(\"Error in analyze API route:\", error);\n        console.error(\"Error details:\", {\n            name: error instanceof Error ? error.name : \"Unknown\",\n            message: error instanceof Error ? error.message : \"Unknown error\",\n            stack: error instanceof Error ? error.stack : undefined\n        });\n        return next_dist_server_web_exports_next_response__WEBPACK_IMPORTED_MODULE_1__[\"default\"].json({\n            error: \"Invalid request body\"\n        }, {\n            status: 400\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QyxPQUFPZCxpQkFBaUJZLFFBQVFaLE1BQU1jLEtBQUssR0FBR0M7UUFDaEQ7UUFDQSxPQUFPL0Isa0ZBQVlBLENBQUNJLElBQUksQ0FDdEI7WUFBRVksT0FBTztRQUF1QixHQUNoQztZQUFFQyxRQUFRO1FBQUk7SUFFbEI7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWludGVydmlld2VyLy4vc3JjL2FwcC9hcGkvYW5hbHl6ZS9yb3V0ZS50cz8wN2RiIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGFuYWx5emVSZXNwb25zZSB9IGZyb20gJ0AvdXRpbHMvZ3JvcSc7XG5pbXBvcnQgeyBOZXh0UmVzcG9uc2UgfSBmcm9tICduZXh0L3NlcnZlcic7XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBQT1NUKHJlcXVlc3Q6IFJlcXVlc3QpIHtcbiAgdHJ5IHtcbiAgICBjb25zdCBib2R5ID0gYXdhaXQgcmVxdWVzdC5qc29uKCk7XG4gICAgY29uc3QgeyBxdWVzdGlvbiwgcmVzcG9uc2UsIGV4cGVjdGVkVG9waWNzLCBxdWVzdGlvblR5cGUsIGNvcnJlY3RPcHRpb24sIGV4cGxhbmF0aW9uIH0gPSBib2R5O1xuXG4gICAgY29uc29sZS5sb2coJ0FuYWx5emUgQVBJIHJlY2VpdmVkOicsIHtcbiAgICAgIHF1ZXN0aW9uVHlwZSxcbiAgICAgIGV4cGVjdGVkVG9waWNzLFxuICAgICAgcmVzcG9uc2VMZW5ndGg6IHJlc3BvbnNlPy5sZW5ndGgsXG4gICAgICBoYXNDb3JyZWN0T3B0aW9uOiAhIWNvcnJlY3RPcHRpb25cbiAgICB9KTtcblxuICAgIGlmICghcXVlc3Rpb24gfHwgIXJlc3BvbnNlIHx8ICFleHBlY3RlZFRvcGljcyB8fCAhcXVlc3Rpb25UeXBlKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdNaXNzaW5nIHJlcXVpcmVkIGZpZWxkczonLCB7IHF1ZXN0aW9uOiAhIXF1ZXN0aW9uLCByZXNwb25zZTogISFyZXNwb25zZSwgZXhwZWN0ZWRUb3BpY3M6ICEhZXhwZWN0ZWRUb3BpY3MsIHF1ZXN0aW9uVHlwZTogISFxdWVzdGlvblR5cGUgfSk7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgZXJyb3I6ICdNaXNzaW5nIHJlcXVpcmVkIGZpZWxkcycgfSxcbiAgICAgICAgeyBzdGF0dXM6IDQwMCB9XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEZvciBNQ1EgcXVlc3Rpb25zLCBkaXJlY3RseSBjb21wYXJlIHdpdGggY29ycmVjdCBhbnN3ZXJcbiAgICBpZiAocXVlc3Rpb25UeXBlLnRvTG93ZXJDYXNlKCkgPT09ICdtY3EnKSB7XG4gICAgICBpZiAoIWNvcnJlY3RPcHRpb24pIHtcbiAgICAgICAgY29uc29sZS5lcnJvcignTWlzc2luZyBjb3JyZWN0IG9wdGlvbiBmb3IgTUNRJyk7XG4gICAgICAgIHJldHVybiBOZXh0UmVzcG9uc2UuanNvbihcbiAgICAgICAgICB7IGVycm9yOiAnTWlzc2luZyBjb3JyZWN0IG9wdGlvbiBmb3IgTUNRJyB9LFxuICAgICAgICAgIHsgc3RhdHVzOiA0MDAgfVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0NvcnJlY3QgPSByZXNwb25zZS50b1VwcGVyQ2FzZSgpID09PSBjb3JyZWN0T3B0aW9uLnRvVXBwZXJDYXNlKCk7XG4gICAgICBjb25zdCBtY3FBbmFseXNpcyA9IHtcbiAgICAgICAgc2NvcmU6IGlzQ29ycmVjdCA/IDEwIDogMCwgLy8gMTAgcG9pbnRzIGZvciBjb3JyZWN0LCAwIGZvciB3cm9uZ1xuICAgICAgICBmZWVkYmFjazogaXNDb3JyZWN0IFxuICAgICAgICAgID8gYENvcnJlY3QhICR7ZXhwbGFuYXRpb24gfHwgJyd9YFxuICAgICAgICAgIDogYEluY29ycmVjdC4gVGhlIGNvcnJlY3QgYW5zd2VyIGlzICR7Y29ycmVjdE9wdGlvbn0uICR7ZXhwbGFuYXRpb24gfHwgJyd9YCxcbiAgICAgICAgY292ZXJlZFRvcGljczogaXNDb3JyZWN0ID8gZXhwZWN0ZWRUb3BpY3MgOiBbXSxcbiAgICAgICAgbWlzc2luZ1RvcGljczogaXNDb3JyZWN0ID8gW10gOiBleHBlY3RlZFRvcGljc1xuICAgICAgfTtcblxuICAgICAgY29uc29sZS5sb2coJ01DUSBBbmFseXNpczonLCBtY3FBbmFseXNpcyk7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24obWNxQW5hbHlzaXMpO1xuICAgIH1cblxuICAgIC8vIEZvciBvdGhlciBxdWVzdGlvbiB0eXBlcywgdXNlIEdST1EgQVBJXG4gICAgdHJ5IHtcbiAgICAgIGNvbnNvbGUubG9nKCdBbmFseXppbmcgcmVzcG9uc2Ugd2l0aCBHUk9RLi4uJyk7XG4gICAgICBjb25zdCBhbmFseXNpcyA9IGF3YWl0IGFuYWx5emVSZXNwb25zZShxdWVzdGlvbiwgcmVzcG9uc2UsIGV4cGVjdGVkVG9waWNzKTtcbiAgICAgIGNvbnNvbGUubG9nKCdHUk9RIEFuYWx5c2lzIHJlc3VsdDonLCBhbmFseXNpcyk7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oYW5hbHlzaXMpO1xuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvciBhbmFseXppbmcgcmVzcG9uc2U6JywgZXJyb3IpO1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgZGV0YWlsczonLCB7XG4gICAgICAgIG5hbWU6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5uYW1lIDogJ1Vua25vd24nLFxuICAgICAgICBtZXNzYWdlOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgICAgc3RhY2s6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5zdGFjayA6IHVuZGVmaW5lZFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICAgIHsgXG4gICAgICAgICAgZXJyb3I6ICdGYWlsZWQgdG8gYW5hbHl6ZSByZXNwb25zZScsIFxuICAgICAgICAgIGRldGFpbHM6IGVycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InXG4gICAgICAgIH0sXG4gICAgICAgIHsgc3RhdHVzOiA1MDAgfVxuICAgICAgKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgY29uc29sZS5lcnJvcignRXJyb3IgaW4gYW5hbHl6ZSBBUEkgcm91dGU6JywgZXJyb3IpO1xuICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIGRldGFpbHM6Jywge1xuICAgICAgbmFtZTogZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm5hbWUgOiAnVW5rbm93bicsXG4gICAgICBtZXNzYWdlOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJyxcbiAgICAgIHN0YWNrOiBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3Iuc3RhY2sgOiB1bmRlZmluZWRcbiAgICB9KTtcbiAgICByZXR1cm4gTmV4dFJlc3BvbnNlLmpzb24oXG4gICAgICB7IGVycm9yOiAnSW52YWxpZCByZXF1ZXN0IGJvZHknIH0sXG4gICAgICB7IHN0YXR1czogNDAwIH1cbiAgICApO1xuICB9XG59XG4iXSwibmFtZXMiOlsiYW5hbHl6ZVJlc3BvbnNlIiwiTmV4dFJlc3BvbnNlIiwiUE9TVCIsInJlcXVlc3QiLCJib2R5IiwianNvbiIsInF1ZXN0aW9uIiwicmVzcG9uc2UiLCJleHBlY3RlZFRvcGljcyIsInF1ZXN0aW9uVHlwZSIsImNvcnJlY3RPcHRpb24iLCJleHBsYW5hdGlvbiIsImNvbnNvbGUiLCJsb2ciLCJyZXNwb25zZUxlbmd0aCIsImxlbmd0aCIsImhhc0NvcnJlY3RPcHRpb24iLCJlcnJvciIsInN0YXR1cyIsInRvTG93ZXJDYXNlIiwiaXNDb3JyZWN0IiwidG9VcHBlckNhc2UiLCJtY3FBbmFseXNpcyIsInNjb3JlIiwiZmVlZGJhY2siLCJjb3ZlcmVkVG9waWNzIiwibWlzc2luZ1RvcGljcyIsImFuYWx5c2lzIiwibmFtZSIsIkVycm9yIiwibWVzc2FnZSIsInN0YWNrIiwidW5kZWZpbmVkIiwiZGV0YWlscyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./src/app/api/analyze/route.ts\n");

/***/ }),

/***/ "(rsc)/./src/utils/groq.ts":
/*!***************************!*\
  !*** ./src/utils/groq.ts ***!
  \***************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   analyzeResponse: () => (/* binding */ analyzeResponse),\n/* harmony export */   generateQuestion: () => (/* binding */ generateQuestion),\n/* harmony export */   generateQuestionPrompt: () => (/* binding */ generateQuestionPrompt),\n/* harmony export */   validateQuestionResponse: () => (/* binding */ validateQuestionResponse)\n/* harmony export */ });\nconst GROQ_API_KEY = \"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\";\nconst API_URL = \"https://api.groq.com/openai/v1/chat/completions\";\n// Rate limiting configuration\nlet lastRequestTime = 0;\nconst MIN_REQUEST_INTERVAL = 3000; // 3 seconds between requests\nconst sleep = (ms)=>new Promise((resolve)=>setTimeout(resolve, ms));\nconst waitForRateLimit = async ()=>{\n    const now = Date.now();\n    const timeSinceLastRequest = now - lastRequestTime;\n    if (timeSinceLastRequest < MIN_REQUEST_INTERVAL) {\n        const waitTime = MIN_REQUEST_INTERVAL - timeSinceLastRequest;\n        await sleep(waitTime);\n    }\n    lastRequestTime = Date.now();\n};\nasync function makeGroqRequest(prompt) {\n    if (!GROQ_API_KEY) {\n        throw new Error(\"GROQ API key is not configured\");\n    }\n    await waitForRateLimit();\n    try {\n        const response = await fetch(API_URL, {\n            method: \"POST\",\n            headers: {\n                \"Authorization\": `Bearer ${GROQ_API_KEY}`,\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n                model: \"llama-3.2-90b-vision-preview\",\n                messages: [\n                    {\n                        role: \"system\",\n                        content: \"You are a technical interviewer. Your responses must be in valid JSON format. Always wrap property names in double quotes. Do not include any text before or after the JSON object.\"\n                    },\n                    {\n                        role: \"user\",\n                        content: prompt\n                    }\n                ],\n                temperature: 0.7,\n                max_tokens: 1000,\n                top_p: 0.95,\n                stream: false\n            })\n        });\n        if (!response.ok) {\n            const errorText = await response.text();\n            console.error(\"API response error:\", {\n                status: response.status,\n                statusText: response.statusText,\n                errorText\n            });\n            if (response.status === 429) {\n                throw new Error(\"Rate limit exceeded\");\n            }\n            throw new Error(`API request failed: ${response.status} ${response.statusText}`);\n        }\n        const responseData = await response.json();\n        console.log(\"Raw API response:\", JSON.stringify(responseData, null, 2));\n        return responseData;\n    } catch (error) {\n        console.error(\"Error in makeGroqRequest:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error type:\", error.constructor.name);\n            console.error(\"Error stack:\", error.stack);\n        } else {\n            console.error(\"Non-Error object thrown\");\n        }\n        throw error;\n    }\n}\nfunction parseJsonResponse(response, requiredFields = [\n    \"question\",\n    \"expectedTopics\",\n    \"difficulty\",\n    \"modelAnswer\"\n]) {\n    if (!response || typeof response !== \"string\") {\n        console.error(\"Invalid response type:\", typeof response);\n        throw new Error(\"Response must be a non-empty string\");\n    }\n    console.log(\"Attempting to parse response:\", response);\n    // First, try to find a JSON object in the response\n    const jsonMatch = response.match(/\\{[\\s\\S]*\\}/);\n    if (!jsonMatch) {\n        console.error(\"No JSON object found in response\");\n        throw new Error(\"No JSON object found in response\");\n    }\n    let cleanedResponse = jsonMatch[0];\n    try {\n        // Try parsing the extracted JSON first\n        const parsed = JSON.parse(cleanedResponse);\n        // Validate required fields\n        const missingFields = requiredFields.filter((field)=>!(field in parsed));\n        if (missingFields.length > 0) {\n            throw new Error(`Missing required fields: ${missingFields.join(\", \")}`);\n        }\n        return parsed;\n    } catch (initialError) {\n        console.error(\"Initial JSON Parse Error:\", initialError);\n        console.log(\"Failed to parse JSON. Response details:\", {\n            type: typeof cleanedResponse,\n            length: cleanedResponse.length,\n            preview: cleanedResponse.substring(0, 100),\n            charCodes: cleanedResponse.substring(0, 50).split(\"\").map((c, i)=>`[${i}]${c}(${c.charCodeAt(0)})`).join(\" \")\n        });\n        try {\n            // Try to fix common JSON issues\n            cleanedResponse = cleanedResponse.replace(/^\\s*|\\s*$/g, \"\") // Trim whitespace\n            .replace(/[\\u200B-\\u200D\\uFEFF]/g, \"\") // Remove zero-width spaces\n            .replace(/,(\\s*[}\\]])/g, \"$1\") // Remove trailing commas\n            .replace(/([{,]\\s*)(\\w+)(\\s*:)/g, '$1\"$2\"$3') // Quote unquoted keys\n            .replace(/:\\s*'([^']*)'/g, ':\"$1\"') // Replace single quotes with double quotes\n            .replace(/\\\\([^\"\\\\\\/bfnrtu])/g, \"$1\") // Fix invalid escape sequences\n            .replace(/\\n/g, \"\\\\n\") // Escape newlines\n            .replace(/\\r/g, \"\\\\r\") // Escape carriage returns\n            .replace(/\\t/g, \"\\\\t\"); // Escape tabs\n            console.log(\"Cleaned response:\", cleanedResponse);\n            const parsed = JSON.parse(cleanedResponse);\n            // Validate required fields again\n            const missingFields = requiredFields.filter((field)=>!(field in parsed));\n            if (missingFields.length > 0) {\n                throw new Error(`Missing required fields after cleaning: ${missingFields.join(\", \")}`);\n            }\n            return parsed;\n        } catch (finalError) {\n            console.error(\"Final JSON Parse Error:\", finalError);\n            const errorMessage = finalError instanceof Error ? finalError.message : \"Unknown error occurred while parsing JSON\";\n            throw new Error(`Failed to parse response as JSON: ${errorMessage}\\nResponse: ${cleanedResponse}`);\n        }\n    }\n}\nfunction validateQuestionResponse(response, questionType) {\n    if (!response) {\n        throw new Error(\"Response cannot be null or undefined\");\n    }\n    const requiredFields = [\n        \"question\",\n        \"expectedTopics\",\n        \"difficulty\",\n        \"modelAnswer\"\n    ];\n    const missingFields = requiredFields.filter((field)=>!(field in response));\n    if (missingFields.length > 0) {\n        throw new Error(`Missing required fields: ${missingFields.join(\", \")}`);\n    }\n    if (!Array.isArray(response.expectedTopics)) {\n        throw new Error(\"expectedTopics must be an array\");\n    }\n    if (typeof response.difficulty !== \"number\") {\n        throw new Error(\"difficulty must be a number\");\n    }\n    if (questionType.toLowerCase() === \"mcq\") {\n        if (!response.modelAnswer.options || typeof response.modelAnswer.options !== \"object\") {\n            throw new Error(\"MCQ response must include options object\");\n        }\n        const requiredOptions = [\n            \"A\",\n            \"B\",\n            \"C\",\n            \"D\"\n        ];\n        const missingOptions = requiredOptions.filter((opt)=>!(opt in response.modelAnswer.options));\n        if (missingOptions.length > 0) {\n            throw new Error(`Missing MCQ options: ${missingOptions.join(\", \")}`);\n        }\n        if (!response.modelAnswer.correctOption || !requiredOptions.includes(response.modelAnswer.correctOption)) {\n            throw new Error(\"MCQ response must include a valid correctOption (A, B, C, or D)\");\n        }\n        if (!response.modelAnswer.explanation || typeof response.modelAnswer.explanation !== \"string\") {\n            throw new Error(\"MCQ response must include an explanation\");\n        }\n    } else if (questionType.toLowerCase() === \"coding\") {\n        if (!response.modelAnswer.isCode || typeof response.modelAnswer.content !== \"string\") {\n            throw new Error(\"Coding response must include isCode flag and content\");\n        }\n    } else {\n        if (typeof response.modelAnswer.content !== \"string\") {\n            throw new Error(\"Model answer must include content string\");\n        }\n    }\n    return response;\n}\nfunction sanitizeTechnology(tech) {\n    // Map of special cases (case-insensitive)\n    const specialCases = {\n        \"c++\": \"cpp\",\n        \"c#\": \"csharp\",\n        \".net\": \"dotnet\",\n        \"node.js\": \"nodejs\",\n        \"react.js\": \"react\",\n        \"vue.js\": \"vue\"\n    };\n    // Check for special cases (case-insensitive)\n    const lowerTech = tech.toLowerCase();\n    if (specialCases[lowerTech]) {\n        return specialCases[lowerTech];\n    }\n    // Remove special characters and spaces for other cases\n    return tech.replace(/[^a-zA-Z0-9]/g, \"\");\n}\nfunction generateQuestionPrompt(technology, difficulty, questionNumber, questionType) {\n    // Different prompts based on question type\n    if (questionType.toLowerCase() === \"mcq\") {\n        return `You are a technical interviewer specializing in ${technology}. Generate a multiple choice question (MCQ) that tests knowledge of ${technology}.\n\nThe question should:\n1. Test specific knowledge in ${technology}\n2. Be appropriate for ${difficulty} difficulty level\n3. Have exactly 4 options (A, B, C, D)\n4. Have only one correct answer\n5. Question number ${questionNumber} in the sequence - ensure it's completely different from previous questions\n6. Include clear explanations for why each option is correct or incorrect\n\nIMPORTANT: Return ONLY a valid JSON object with the following fields:\n{\n  \"question\": \"The MCQ question text - must be specific to ${technology}\",\n  \"expectedTopics\": [\n    \"List of concepts being tested\",\n    \"Key ${technology} knowledge points covered\"\n  ],\n  \"difficulty\": ${difficulty === \"Easy\" ? 1 : difficulty === \"Medium\" ? 2 : 3},\n  \"modelAnswer\": {\n    \"options\": {\n      \"A\": \"First option\",\n      \"B\": \"Second option\",\n      \"C\": \"Third option\",\n      \"D\": \"Fourth option\"\n    },\n    \"correctOption\": \"The correct option letter (A, B, C, or D)\",\n    \"explanation\": \"Detailed explanation of why the correct answer is right and why others are wrong\"\n  }\n}\n\nReturn ONLY the JSON object, no additional text. Ensure all strings are properly escaped.`;\n    }\n    if (questionType.toLowerCase() === \"subjective\") {\n        return `You are a technical interviewer specializing in ${technology}. Generate a logical reasoning and analytical thinking question that is relevant to ${technology} development scenarios.\n\nThe question should:\n1. Test critical thinking and problem-solving abilities in the context of ${technology} projects\n2. Focus on real-world scenarios a ${technology} developer might face\n3. Be appropriate for ${difficulty} difficulty level\n4. Test decision-making and analytical skills specific to ${technology} development\n5. Question number ${questionNumber} in the sequence - ensure it's different from previous questions\n\nIMPORTANT: Return ONLY a valid JSON object with the following fields:\n{\n  \"question\": \"The question text - must be specific to ${technology}\",\n  \"expectedTopics\": [\n    \"List of 4-5 key points that should be covered in the answer\",\n    \"Each point should be relevant to ${technology}\"\n  ],\n  \"difficulty\": ${difficulty === \"Easy\" ? 1 : difficulty === \"Medium\" ? 2 : 3},\n  \"modelAnswer\": {\n    \"isCode\": false,\n    \"content\": \"A detailed explanation of what a good answer should include, specific to ${technology}\"\n  }\n}\n\nReturn ONLY the JSON object, no additional text. Ensure all strings are properly escaped.`;\n    }\n    // For coding questions\n    if (questionType.toLowerCase() === \"coding\") {\n        return `You are a technical interviewer specializing in ${technology}. Generate a coding question that tests practical ${technology} implementation skills.\n\nThe question should:\n1. Test coding ability in ${technology}\n2. Be appropriate for ${difficulty} difficulty level\n3. Focus on real-world scenarios\n4. Be clear and unambiguous\n5. Question number ${questionNumber} in the sequence - ensure it's different from previous questions\n\nIMPORTANT: Return ONLY a valid JSON object with the following fields. Ensure all code in the content field is properly escaped:\n{\n  \"question\": \"The coding problem statement with clear requirements and examples\",\n  \"expectedTopics\": [\n    \"List of concepts and skills being tested\",\n    \"Important considerations for the implementation\"\n  ],\n  \"difficulty\": ${difficulty === \"Easy\" ? 1 : difficulty === \"Medium\" ? 2 : 3},\n  \"modelAnswer\": {\n    \"isCode\": true,\n    \"content\": \"// Your code solution here\\\\n// Use double backslashes for newlines\\\\n// Escape all quotes\"\n  }\n}\n\nRULES for the content field:\n1. Use double backslashes for newlines (\\\\n)\n2. Escape all quotes (\\\\\" for double quotes)\n3. Avoid using backticks\n4. Keep indentation using spaces (no tabs)\n5. Escape any special characters\n\nReturn ONLY the JSON object, no additional text.`;\n    }\n    // For MCQ questions\n    return `You are a technical interviewer specializing in ${technology}. Generate a multiple-choice question that tests ${technology} knowledge.\n\nThe question should:\n1. Test understanding of ${technology} concepts\n2. Be appropriate for ${difficulty} difficulty level\n3. Have clear, unambiguous options\n4. Question number ${questionNumber} in the sequence - ensure it's different from previous questions\n\nIMPORTANT: Return ONLY a valid JSON object with the following fields:\n{\n  \"question\": \"The question text\",\n  \"expectedTopics\": [\"Key concepts being tested\"],\n  \"difficulty\": ${difficulty === \"Easy\" ? 1 : difficulty === \"Medium\" ? 2 : 3},\n  \"modelAnswer\": {\n    \"isCode\": false,\n    \"content\": \"Explanation of why the correct answer is right\"\n  },\n  \"options\": [\n    \"A) First option\",\n    \"B) Second option\",\n    \"C) Third option\",\n    \"D) Fourth option\"\n  ],\n  \"correctOption\": \"A\"\n}\n\nReturn ONLY the JSON object, no additional text. Ensure all strings are properly escaped.`;\n}\nasync function generateQuestion(technology, difficulty, questionNumber, questionType) {\n    try {\n        const prompt = generateQuestionPrompt(technology, difficulty, questionNumber, questionType);\n        const response = await makeGroqRequest(prompt);\n        if (!response?.choices?.[0]?.message?.content) {\n            console.error(\"Invalid GROQ response structure:\", response);\n            throw new Error(\"Invalid response structure from GROQ API\");\n        }\n        const content = response.choices[0].message.content;\n        // Detailed logging of the response content\n        console.log(\"Raw response from GROQ:\", content);\n        console.log(\"Response type:\", typeof content);\n        console.log(\"Response length:\", content.length);\n        console.log(\"First 100 characters:\", content.substring(0, 100));\n        // Parse and validate the JSON\n        const parsedResponse = parseJsonResponse(content);\n        // Log the parsed response\n        console.log(\"Successfully parsed response:\", {\n            hasQuestion: !!parsedResponse?.question,\n            hasTopics: !!parsedResponse?.expectedTopics,\n            hasDifficulty: !!parsedResponse?.difficulty,\n            hasModelAnswer: !!parsedResponse?.modelAnswer\n        });\n        // Additional validation for the response structure\n        validateQuestionResponse(parsedResponse, questionType);\n        return parsedResponse;\n    } catch (error) {\n        console.error(\"Error in generateQuestion:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error type:\", error.constructor.name);\n            console.error(\"Error stack:\", error.stack);\n        } else {\n            console.error(\"Non-Error object thrown\");\n        }\n        throw error;\n    }\n}\nasync function analyzeResponse(question, response, expectedTopics) {\n    if (!GROQ_API_KEY) {\n        throw new Error(\"GROQ API key is not configured\");\n    }\n    const prompt = `Analyze this response to the following interview question. Provide feedback and a score out of 10.\n\nQuestion: ${question}\n\nResponse: ${response}\n\nExpected topics to be covered:\n${expectedTopics.map((topic)=>`- ${topic}`).join(\"\\n\")}\n\nReturn your analysis in this JSON format:\n{\n  \"score\": 8,\n  \"feedback\": \"Detailed feedback about the response\",\n  \"coveredTopics\": [\"Topics that were covered well in the response\"],\n  \"missingTopics\": [\"Expected topics that were not covered\"],\n  \"improvement\": \"Suggestions for improvement\"\n}\n\nMake sure to:\n1. Score between 0 and 10 points only\n2. Include all topics from the expected topics list in either coveredTopics or missingTopics\n3. Provide specific, actionable feedback`;\n    try {\n        const apiResponse = await makeGroqRequest(prompt);\n        if (!apiResponse?.choices?.[0]?.message?.content) {\n            throw new Error(\"Invalid response structure from GROQ API\");\n        }\n        // Parse the response with required fields\n        const result = parseJsonResponse(apiResponse.choices[0].message.content, [\n            \"score\",\n            \"feedback\",\n            \"coveredTopics\",\n            \"missingTopics\"\n        ] // Make improvement optional\n        );\n        // Ensure score is between 0 and 10\n        if (typeof result.score === \"number\") {\n            if (result.score > 10) {\n                result.score = Math.min(10, result.score / 10); // Convert percentage to 10-point scale\n            }\n            result.score = Math.max(0, Math.min(10, result.score));\n        } else {\n            result.score = 0;\n        }\n        // Ensure coveredTopics and missingTopics are arrays\n        if (!Array.isArray(result.coveredTopics)) {\n            result.coveredTopics = [];\n        }\n        if (!Array.isArray(result.missingTopics)) {\n            result.missingTopics = [];\n        }\n        return result;\n    } catch (error) {\n        console.error(\"Error in analyzeResponse:\", error);\n        if (error instanceof Error) {\n            console.error(\"Error type:\", error.constructor.name);\n            console.error(\"Error stack:\", error.stack);\n        } else {\n            console.error(\"Non-Error object thrown\");\n        }\n        throw error;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./src/utils/groq.ts\n");

/***/ })

};
;

// load runtime
var __webpack_require__ = require("../../../webpack-runtime.js");
__webpack_require__.C(exports);
var __webpack_exec__ = (moduleId) => (__webpack_require__(__webpack_require__.s = moduleId))
var __webpack_exports__ = __webpack_require__.X(0, ["vendor-chunks/next"], () => (__webpack_exec__("(rsc)/./node_modules/next/dist/build/webpack/loaders/next-app-loader.js?name=app%2Fapi%2Fanalyze%2Froute&page=%2Fapi%2Fanalyze%2Froute&appPaths=&pagePath=private-next-app-dir%2Fapi%2Fanalyze%2Froute.ts&appDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer%5Csrc%5Capp&pageExtensions=tsx&pageExtensions=ts&pageExtensions=jsx&pageExtensions=js&rootDir=C%3A%5CAI%20Projects%5CWindsurf%5CAIInterviewer&isDev=true&tsconfigPath=tsconfig.json&basePath=&assetPrefix=&nextConfigOutput=&preferredRegion=&middlewareConfig=e30%3D!")));
module.exports = __webpack_exports__;

})();