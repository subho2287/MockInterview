"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@tanstack";
exports.ids = ["vendor-chunks/@tanstack"];
exports.modules = {

/***/ "(ssr)/./node_modules/@tanstack/react-virtual/dist/esm/index.js":
/*!****************************************************************!*\
  !*** ./node_modules/@tanstack/react-virtual/dist/esm/index.js ***!
  \****************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Virtualizer: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.Virtualizer),\n/* harmony export */   approxEqual: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.approxEqual),\n/* harmony export */   debounce: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.debounce),\n/* harmony export */   defaultKeyExtractor: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.defaultKeyExtractor),\n/* harmony export */   defaultRangeExtractor: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.defaultRangeExtractor),\n/* harmony export */   elementScroll: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.elementScroll),\n/* harmony export */   measureElement: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.measureElement),\n/* harmony export */   memo: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.memo),\n/* harmony export */   notUndefined: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.notUndefined),\n/* harmony export */   observeElementOffset: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementOffset),\n/* harmony export */   observeElementRect: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementRect),\n/* harmony export */   observeWindowOffset: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowOffset),\n/* harmony export */   observeWindowRect: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowRect),\n/* harmony export */   useVirtualizer: () => (/* binding */ useVirtualizer),\n/* harmony export */   useWindowVirtualizer: () => (/* binding */ useWindowVirtualizer),\n/* harmony export */   windowScroll: () => (/* reexport safe */ _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.windowScroll)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_dom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react-dom */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react-dom.js\");\n/* harmony import */ var _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @tanstack/virtual-core */ \"(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js\");\n\n\n\n\nconst useIsomorphicLayoutEffect = typeof document !== \"undefined\" ? react__WEBPACK_IMPORTED_MODULE_0__.useLayoutEffect : react__WEBPACK_IMPORTED_MODULE_0__.useEffect;\nfunction useVirtualizerBase(options) {\n    const rerender = react__WEBPACK_IMPORTED_MODULE_0__.useReducer(()=>({}), {})[1];\n    const resolvedOptions = {\n        ...options,\n        onChange: (instance2, sync)=>{\n            var _a;\n            if (sync) {\n                (0,react_dom__WEBPACK_IMPORTED_MODULE_1__.flushSync)(rerender);\n            } else {\n                rerender();\n            }\n            (_a = options.onChange) == null ? void 0 : _a.call(options, instance2, sync);\n        }\n    };\n    const [instance] = react__WEBPACK_IMPORTED_MODULE_0__.useState(()=>new _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.Virtualizer(resolvedOptions));\n    instance.setOptions(resolvedOptions);\n    react__WEBPACK_IMPORTED_MODULE_0__.useEffect(()=>{\n        return instance._didMount();\n    }, []);\n    useIsomorphicLayoutEffect(()=>{\n        return instance._willUpdate();\n    });\n    return instance;\n}\nfunction useVirtualizer(options) {\n    return useVirtualizerBase({\n        observeElementRect: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementRect,\n        observeElementOffset: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeElementOffset,\n        scrollToFn: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.elementScroll,\n        ...options\n    });\n}\nfunction useWindowVirtualizer(options) {\n    return useVirtualizerBase({\n        getScrollElement: ()=>typeof document !== \"undefined\" ? window : null,\n        observeElementRect: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowRect,\n        observeElementOffset: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.observeWindowOffset,\n        scrollToFn: _tanstack_virtual_core__WEBPACK_IMPORTED_MODULE_2__.windowScroll,\n        initialOffset: ()=>typeof document !== \"undefined\" ? window.scrollY : 0,\n        ...options\n    });\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3JlYWN0LXZpcnR1YWwvZGlzdC9lc20vaW5kZXguanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUErQjtBQUNPO0FBQzhIO0FBQzdIO0FBQ3ZDLE1BQU1TLDRCQUE0QixPQUFPQyxhQUFhLGNBQWNWLGtEQUFxQixHQUFHQSw0Q0FBZTtBQUMzRyxTQUFTYSxtQkFBbUJDLE9BQU87SUFDakMsTUFBTUMsV0FBV2YsNkNBQWdCLENBQUMsSUFBTyxFQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsRUFBRTtJQUNwRCxNQUFNaUIsa0JBQWtCO1FBQ3RCLEdBQUdILE9BQU87UUFDVkksVUFBVSxDQUFDQyxXQUFXQztZQUNwQixJQUFJQztZQUNKLElBQUlELE1BQU07Z0JBQ1JuQixvREFBU0EsQ0FBQ2M7WUFDWixPQUFPO2dCQUNMQTtZQUNGO1lBQ0NNLENBQUFBLEtBQUtQLFFBQVFJLFFBQVEsS0FBSyxPQUFPLEtBQUssSUFBSUcsR0FBR0MsSUFBSSxDQUFDUixTQUFTSyxXQUFXQztRQUN6RTtJQUNGO0lBQ0EsTUFBTSxDQUFDRyxTQUFTLEdBQUd2QiwyQ0FBYyxDQUMvQixJQUFNLElBQUlRLCtEQUFXQSxDQUFDUztJQUV4Qk0sU0FBU0UsVUFBVSxDQUFDUjtJQUNwQmpCLDRDQUFlLENBQUM7UUFDZCxPQUFPdUIsU0FBU0csU0FBUztJQUMzQixHQUFHLEVBQUU7SUFDTGpCLDBCQUEwQjtRQUN4QixPQUFPYyxTQUFTSSxXQUFXO0lBQzdCO0lBQ0EsT0FBT0o7QUFDVDtBQUNBLFNBQVNLLGVBQWVkLE9BQU87SUFDN0IsT0FBT0QsbUJBQW1CO1FBQ3hCWCxrQkFBa0JBLHdFQUFBQTtRQUNsQkMsb0JBQW9CQSwwRUFBQUE7UUFDcEIwQixZQUFZekIsaUVBQWFBO1FBQ3pCLEdBQUdVLE9BQU87SUFDWjtBQUNGO0FBQ0EsU0FBU2dCLHFCQUFxQmhCLE9BQU87SUFDbkMsT0FBT0QsbUJBQW1CO1FBQ3hCa0Isa0JBQWtCLElBQU0sT0FBT3JCLGFBQWEsY0FBY3NCLFNBQVM7UUFDbkU5QixvQkFBb0JHLHFFQUFpQkE7UUFDckNGLHNCQUFzQkcsdUVBQW1CQTtRQUN6Q3VCLFlBQVl0QixnRUFBWUE7UUFDeEIwQixlQUFlLElBQU0sT0FBT3ZCLGFBQWEsY0FBY3NCLE9BQU9FLE9BQU8sR0FBRztRQUN4RSxHQUFHcEIsT0FBTztJQUNaO0FBQ0Y7QUFJRSxDQUNGLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2FpLWludGVydmlld2VyLy4vbm9kZV9tb2R1bGVzL0B0YW5zdGFjay9yZWFjdC12aXJ0dWFsL2Rpc3QvZXNtL2luZGV4LmpzPzliZjUiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBmbHVzaFN5bmMgfSBmcm9tIFwicmVhY3QtZG9tXCI7XG5pbXBvcnQgeyBvYnNlcnZlRWxlbWVudFJlY3QsIG9ic2VydmVFbGVtZW50T2Zmc2V0LCBlbGVtZW50U2Nyb2xsLCBvYnNlcnZlV2luZG93UmVjdCwgb2JzZXJ2ZVdpbmRvd09mZnNldCwgd2luZG93U2Nyb2xsLCBWaXJ0dWFsaXplciB9IGZyb20gXCJAdGFuc3RhY2svdmlydHVhbC1jb3JlXCI7XG5leHBvcnQgKiBmcm9tIFwiQHRhbnN0YWNrL3ZpcnR1YWwtY29yZVwiO1xuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIiA/IFJlYWN0LnVzZUxheW91dEVmZmVjdCA6IFJlYWN0LnVzZUVmZmVjdDtcbmZ1bmN0aW9uIHVzZVZpcnR1YWxpemVyQmFzZShvcHRpb25zKSB7XG4gIGNvbnN0IHJlcmVuZGVyID0gUmVhY3QudXNlUmVkdWNlcigoKSA9PiAoe30pLCB7fSlbMV07XG4gIGNvbnN0IHJlc29sdmVkT3B0aW9ucyA9IHtcbiAgICAuLi5vcHRpb25zLFxuICAgIG9uQ2hhbmdlOiAoaW5zdGFuY2UyLCBzeW5jKSA9PiB7XG4gICAgICB2YXIgX2E7XG4gICAgICBpZiAoc3luYykge1xuICAgICAgICBmbHVzaFN5bmMocmVyZW5kZXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVyZW5kZXIoKTtcbiAgICAgIH1cbiAgICAgIChfYSA9IG9wdGlvbnMub25DaGFuZ2UpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdGlvbnMsIGluc3RhbmNlMiwgc3luYyk7XG4gICAgfVxuICB9O1xuICBjb25zdCBbaW5zdGFuY2VdID0gUmVhY3QudXNlU3RhdGUoXG4gICAgKCkgPT4gbmV3IFZpcnR1YWxpemVyKHJlc29sdmVkT3B0aW9ucylcbiAgKTtcbiAgaW5zdGFuY2Uuc2V0T3B0aW9ucyhyZXNvbHZlZE9wdGlvbnMpO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJldHVybiBpbnN0YW5jZS5fZGlkTW91bnQoKTtcbiAgfSwgW10pO1xuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICByZXR1cm4gaW5zdGFuY2UuX3dpbGxVcGRhdGUoKTtcbiAgfSk7XG4gIHJldHVybiBpbnN0YW5jZTtcbn1cbmZ1bmN0aW9uIHVzZVZpcnR1YWxpemVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHVzZVZpcnR1YWxpemVyQmFzZSh7XG4gICAgb2JzZXJ2ZUVsZW1lbnRSZWN0LFxuICAgIG9ic2VydmVFbGVtZW50T2Zmc2V0LFxuICAgIHNjcm9sbFRvRm46IGVsZW1lbnRTY3JvbGwsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbn1cbmZ1bmN0aW9uIHVzZVdpbmRvd1ZpcnR1YWxpemVyKG9wdGlvbnMpIHtcbiAgcmV0dXJuIHVzZVZpcnR1YWxpemVyQmFzZSh7XG4gICAgZ2V0U2Nyb2xsRWxlbWVudDogKCkgPT4gdHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogbnVsbCxcbiAgICBvYnNlcnZlRWxlbWVudFJlY3Q6IG9ic2VydmVXaW5kb3dSZWN0LFxuICAgIG9ic2VydmVFbGVtZW50T2Zmc2V0OiBvYnNlcnZlV2luZG93T2Zmc2V0LFxuICAgIHNjcm9sbFRvRm46IHdpbmRvd1Njcm9sbCxcbiAgICBpbml0aWFsT2Zmc2V0OiAoKSA9PiB0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIgPyB3aW5kb3cuc2Nyb2xsWSA6IDAsXG4gICAgLi4ub3B0aW9uc1xuICB9KTtcbn1cbmV4cG9ydCB7XG4gIHVzZVZpcnR1YWxpemVyLFxuICB1c2VXaW5kb3dWaXJ0dWFsaXplclxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4LmpzLm1hcFxuIl0sIm5hbWVzIjpbIlJlYWN0IiwiZmx1c2hTeW5jIiwib2JzZXJ2ZUVsZW1lbnRSZWN0Iiwib2JzZXJ2ZUVsZW1lbnRPZmZzZXQiLCJlbGVtZW50U2Nyb2xsIiwib2JzZXJ2ZVdpbmRvd1JlY3QiLCJvYnNlcnZlV2luZG93T2Zmc2V0Iiwid2luZG93U2Nyb2xsIiwiVmlydHVhbGl6ZXIiLCJ1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0IiwiZG9jdW1lbnQiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VFZmZlY3QiLCJ1c2VWaXJ0dWFsaXplckJhc2UiLCJvcHRpb25zIiwicmVyZW5kZXIiLCJ1c2VSZWR1Y2VyIiwicmVzb2x2ZWRPcHRpb25zIiwib25DaGFuZ2UiLCJpbnN0YW5jZTIiLCJzeW5jIiwiX2EiLCJjYWxsIiwiaW5zdGFuY2UiLCJ1c2VTdGF0ZSIsInNldE9wdGlvbnMiLCJfZGlkTW91bnQiLCJfd2lsbFVwZGF0ZSIsInVzZVZpcnR1YWxpemVyIiwic2Nyb2xsVG9GbiIsInVzZVdpbmRvd1ZpcnR1YWxpemVyIiwiZ2V0U2Nyb2xsRWxlbWVudCIsIndpbmRvdyIsImluaXRpYWxPZmZzZXQiLCJzY3JvbGxZIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/react-virtual/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/virtual-core/dist/esm/index.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Virtualizer: () => (/* binding */ Virtualizer),\n/* harmony export */   approxEqual: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.approxEqual),\n/* harmony export */   debounce: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce),\n/* harmony export */   defaultKeyExtractor: () => (/* binding */ defaultKeyExtractor),\n/* harmony export */   defaultRangeExtractor: () => (/* binding */ defaultRangeExtractor),\n/* harmony export */   elementScroll: () => (/* binding */ elementScroll),\n/* harmony export */   measureElement: () => (/* binding */ measureElement),\n/* harmony export */   memo: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.memo),\n/* harmony export */   notUndefined: () => (/* reexport safe */ _utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined),\n/* harmony export */   observeElementOffset: () => (/* binding */ observeElementOffset),\n/* harmony export */   observeElementRect: () => (/* binding */ observeElementRect),\n/* harmony export */   observeWindowOffset: () => (/* binding */ observeWindowOffset),\n/* harmony export */   observeWindowRect: () => (/* binding */ observeWindowRect),\n/* harmony export */   windowScroll: () => (/* binding */ windowScroll)\n/* harmony export */ });\n/* harmony import */ var _utils_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils.js */ \"(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js\");\n\nconst defaultKeyExtractor = (index)=>index;\nconst defaultRangeExtractor = (range)=>{\n    const start = Math.max(range.startIndex - range.overscan, 0);\n    const end = Math.min(range.endIndex + range.overscan, range.count - 1);\n    const arr = [];\n    for(let i = start; i <= end; i++){\n        arr.push(i);\n    }\n    return arr;\n};\nconst observeElementRect = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const targetWindow = instance.targetWindow;\n    if (!targetWindow) {\n        return;\n    }\n    const handler = (rect)=>{\n        const { width, height } = rect;\n        cb({\n            width: Math.round(width),\n            height: Math.round(height)\n        });\n    };\n    handler(element.getBoundingClientRect());\n    if (!targetWindow.ResizeObserver) {\n        return ()=>{};\n    }\n    const observer = new targetWindow.ResizeObserver((entries)=>{\n        const entry = entries[0];\n        if (entry == null ? void 0 : entry.borderBoxSize) {\n            const box = entry.borderBoxSize[0];\n            if (box) {\n                handler({\n                    width: box.inlineSize,\n                    height: box.blockSize\n                });\n                return;\n            }\n        }\n        handler(element.getBoundingClientRect());\n    });\n    observer.observe(element, {\n        box: \"border-box\"\n    });\n    return ()=>{\n        observer.unobserve(element);\n    };\n};\nconst addEventListenerOptions = {\n    passive: true\n};\nconst observeWindowRect = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const handler = ()=>{\n        cb({\n            width: element.innerWidth,\n            height: element.innerHeight\n        });\n    };\n    handler();\n    element.addEventListener(\"resize\", handler, addEventListenerOptions);\n    return ()=>{\n        element.removeEventListener(\"resize\", handler);\n    };\n};\nconst supportsScrollend =  true ? true : 0;\nconst observeElementOffset = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const targetWindow = instance.targetWindow;\n    if (!targetWindow) {\n        return;\n    }\n    let offset = 0;\n    const fallback = instance.options.useScrollendEvent && supportsScrollend ? ()=>void 0 : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce)(targetWindow, ()=>{\n        cb(offset, false);\n    }, instance.options.isScrollingResetDelay);\n    const createHandler = (isScrolling)=>()=>{\n            const { horizontal, isRtl } = instance.options;\n            offset = horizontal ? element[\"scrollLeft\"] * (isRtl && -1 || 1) : element[\"scrollTop\"];\n            fallback();\n            cb(offset, isScrolling);\n        };\n    const handler = createHandler(true);\n    const endHandler = createHandler(false);\n    endHandler();\n    element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n    return ()=>{\n        element.removeEventListener(\"scroll\", handler);\n        element.removeEventListener(\"scrollend\", endHandler);\n    };\n};\nconst observeWindowOffset = (instance, cb)=>{\n    const element = instance.scrollElement;\n    if (!element) {\n        return;\n    }\n    const targetWindow = instance.targetWindow;\n    if (!targetWindow) {\n        return;\n    }\n    let offset = 0;\n    const fallback = instance.options.useScrollendEvent && supportsScrollend ? ()=>void 0 : (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.debounce)(targetWindow, ()=>{\n        cb(offset, false);\n    }, instance.options.isScrollingResetDelay);\n    const createHandler = (isScrolling)=>()=>{\n            offset = element[instance.options.horizontal ? \"scrollX\" : \"scrollY\"];\n            fallback();\n            cb(offset, isScrolling);\n        };\n    const handler = createHandler(true);\n    const endHandler = createHandler(false);\n    endHandler();\n    element.addEventListener(\"scroll\", handler, addEventListenerOptions);\n    element.addEventListener(\"scrollend\", endHandler, addEventListenerOptions);\n    return ()=>{\n        element.removeEventListener(\"scroll\", handler);\n        element.removeEventListener(\"scrollend\", endHandler);\n    };\n};\nconst measureElement = (element, entry, instance)=>{\n    if (entry == null ? void 0 : entry.borderBoxSize) {\n        const box = entry.borderBoxSize[0];\n        if (box) {\n            const size = Math.round(box[instance.options.horizontal ? \"inlineSize\" : \"blockSize\"]);\n            return size;\n        }\n    }\n    return Math.round(element.getBoundingClientRect()[instance.options.horizontal ? \"width\" : \"height\"]);\n};\nconst windowScroll = (offset, { adjustments = 0, behavior }, instance)=>{\n    var _a, _b;\n    const toOffset = offset + adjustments;\n    (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n        [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n        behavior\n    });\n};\nconst elementScroll = (offset, { adjustments = 0, behavior }, instance)=>{\n    var _a, _b;\n    const toOffset = offset + adjustments;\n    (_b = (_a = instance.scrollElement) == null ? void 0 : _a.scrollTo) == null ? void 0 : _b.call(_a, {\n        [instance.options.horizontal ? \"left\" : \"top\"]: toOffset,\n        behavior\n    });\n};\nclass Virtualizer {\n    constructor(opts){\n        this.unsubs = [];\n        this.scrollElement = null;\n        this.targetWindow = null;\n        this.isScrolling = false;\n        this.scrollToIndexTimeoutId = null;\n        this.measurementsCache = [];\n        this.itemSizeCache = /* @__PURE__ */ new Map();\n        this.pendingMeasuredCacheIndexes = [];\n        this.scrollRect = null;\n        this.scrollOffset = null;\n        this.scrollDirection = null;\n        this.scrollAdjustments = 0;\n        this.elementsCache = /* @__PURE__ */ new Map();\n        this.observer = /* @__PURE__ */ (()=>{\n            let _ro = null;\n            const get = ()=>{\n                if (_ro) {\n                    return _ro;\n                }\n                if (!this.targetWindow || !this.targetWindow.ResizeObserver) {\n                    return null;\n                }\n                return _ro = new this.targetWindow.ResizeObserver((entries)=>{\n                    entries.forEach((entry)=>{\n                        this._measureElement(entry.target, entry);\n                    });\n                });\n            };\n            return {\n                disconnect: ()=>{\n                    var _a;\n                    (_a = get()) == null ? void 0 : _a.disconnect();\n                    _ro = null;\n                },\n                observe: (target)=>{\n                    var _a;\n                    return (_a = get()) == null ? void 0 : _a.observe(target, {\n                        box: \"border-box\"\n                    });\n                },\n                unobserve: (target)=>{\n                    var _a;\n                    return (_a = get()) == null ? void 0 : _a.unobserve(target);\n                }\n            };\n        })();\n        this.range = null;\n        this.setOptions = (opts2)=>{\n            Object.entries(opts2).forEach(([key, value])=>{\n                if (typeof value === \"undefined\") delete opts2[key];\n            });\n            this.options = {\n                debug: false,\n                initialOffset: 0,\n                overscan: 1,\n                paddingStart: 0,\n                paddingEnd: 0,\n                scrollPaddingStart: 0,\n                scrollPaddingEnd: 0,\n                horizontal: false,\n                getItemKey: defaultKeyExtractor,\n                rangeExtractor: defaultRangeExtractor,\n                onChange: ()=>{},\n                measureElement,\n                initialRect: {\n                    width: 0,\n                    height: 0\n                },\n                scrollMargin: 0,\n                gap: 0,\n                indexAttribute: \"data-index\",\n                initialMeasurementsCache: [],\n                lanes: 1,\n                isScrollingResetDelay: 150,\n                enabled: true,\n                isRtl: false,\n                useScrollendEvent: true,\n                ...opts2\n            };\n        };\n        this.notify = (sync)=>{\n            var _a, _b;\n            (_b = (_a = this.options).onChange) == null ? void 0 : _b.call(_a, this, sync);\n        };\n        this.maybeNotify = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>{\n            this.calculateRange();\n            return [\n                this.isScrolling,\n                this.range ? this.range.startIndex : null,\n                this.range ? this.range.endIndex : null\n            ];\n        }, (isScrolling)=>{\n            this.notify(isScrolling);\n        }, {\n            key:  true && \"maybeNotify\",\n            debug: ()=>this.options.debug,\n            initialDeps: [\n                this.isScrolling,\n                this.range ? this.range.startIndex : null,\n                this.range ? this.range.endIndex : null\n            ]\n        });\n        this.cleanup = ()=>{\n            this.unsubs.filter(Boolean).forEach((d)=>d());\n            this.unsubs = [];\n            this.observer.disconnect();\n            this.scrollElement = null;\n            this.targetWindow = null;\n        };\n        this._didMount = ()=>{\n            return ()=>{\n                this.cleanup();\n            };\n        };\n        this._willUpdate = ()=>{\n            var _a;\n            const scrollElement = this.options.enabled ? this.options.getScrollElement() : null;\n            if (this.scrollElement !== scrollElement) {\n                this.cleanup();\n                if (!scrollElement) {\n                    this.maybeNotify();\n                    return;\n                }\n                this.scrollElement = scrollElement;\n                if (this.scrollElement && \"ownerDocument\" in this.scrollElement) {\n                    this.targetWindow = this.scrollElement.ownerDocument.defaultView;\n                } else {\n                    this.targetWindow = ((_a = this.scrollElement) == null ? void 0 : _a.window) ?? null;\n                }\n                this.elementsCache.forEach((cached)=>{\n                    this.observer.observe(cached);\n                });\n                this._scrollToOffset(this.getScrollOffset(), {\n                    adjustments: void 0,\n                    behavior: void 0\n                });\n                this.unsubs.push(this.options.observeElementRect(this, (rect)=>{\n                    this.scrollRect = rect;\n                    this.maybeNotify();\n                }));\n                this.unsubs.push(this.options.observeElementOffset(this, (offset, isScrolling)=>{\n                    this.scrollAdjustments = 0;\n                    this.scrollDirection = isScrolling ? this.getScrollOffset() < offset ? \"forward\" : \"backward\" : null;\n                    this.scrollOffset = offset;\n                    this.isScrolling = isScrolling;\n                    this.maybeNotify();\n                }));\n            }\n        };\n        this.getSize = ()=>{\n            if (!this.options.enabled) {\n                this.scrollRect = null;\n                return 0;\n            }\n            this.scrollRect = this.scrollRect ?? this.options.initialRect;\n            return this.scrollRect[this.options.horizontal ? \"width\" : \"height\"];\n        };\n        this.getScrollOffset = ()=>{\n            if (!this.options.enabled) {\n                this.scrollOffset = null;\n                return 0;\n            }\n            this.scrollOffset = this.scrollOffset ?? (typeof this.options.initialOffset === \"function\" ? this.options.initialOffset() : this.options.initialOffset);\n            return this.scrollOffset;\n        };\n        this.getFurthestMeasurement = (measurements, index)=>{\n            const furthestMeasurementsFound = /* @__PURE__ */ new Map();\n            const furthestMeasurements = /* @__PURE__ */ new Map();\n            for(let m = index - 1; m >= 0; m--){\n                const measurement = measurements[m];\n                if (furthestMeasurementsFound.has(measurement.lane)) {\n                    continue;\n                }\n                const previousFurthestMeasurement = furthestMeasurements.get(measurement.lane);\n                if (previousFurthestMeasurement == null || measurement.end > previousFurthestMeasurement.end) {\n                    furthestMeasurements.set(measurement.lane, measurement);\n                } else if (measurement.end < previousFurthestMeasurement.end) {\n                    furthestMeasurementsFound.set(measurement.lane, true);\n                }\n                if (furthestMeasurementsFound.size === this.options.lanes) {\n                    break;\n                }\n            }\n            return furthestMeasurements.size === this.options.lanes ? Array.from(furthestMeasurements.values()).sort((a, b)=>{\n                if (a.end === b.end) {\n                    return a.index - b.index;\n                }\n                return a.end - b.end;\n            })[0] : void 0;\n        };\n        this.getMeasurementOptions = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.options.count,\n                this.options.paddingStart,\n                this.options.scrollMargin,\n                this.options.getItemKey,\n                this.options.enabled\n            ], (count, paddingStart, scrollMargin, getItemKey, enabled)=>{\n            this.pendingMeasuredCacheIndexes = [];\n            return {\n                count,\n                paddingStart,\n                scrollMargin,\n                getItemKey,\n                enabled\n            };\n        }, {\n            key: false\n        });\n        this.getMeasurements = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getMeasurementOptions(),\n                this.itemSizeCache\n            ], ({ count, paddingStart, scrollMargin, getItemKey, enabled }, itemSizeCache)=>{\n            if (!enabled) {\n                this.measurementsCache = [];\n                this.itemSizeCache.clear();\n                return [];\n            }\n            if (this.measurementsCache.length === 0) {\n                this.measurementsCache = this.options.initialMeasurementsCache;\n                this.measurementsCache.forEach((item)=>{\n                    this.itemSizeCache.set(item.key, item.size);\n                });\n            }\n            const min = this.pendingMeasuredCacheIndexes.length > 0 ? Math.min(...this.pendingMeasuredCacheIndexes) : 0;\n            this.pendingMeasuredCacheIndexes = [];\n            const measurements = this.measurementsCache.slice(0, min);\n            for(let i = min; i < count; i++){\n                const key = getItemKey(i);\n                const furthestMeasurement = this.options.lanes === 1 ? measurements[i - 1] : this.getFurthestMeasurement(measurements, i);\n                const start = furthestMeasurement ? furthestMeasurement.end + this.options.gap : paddingStart + scrollMargin;\n                const measuredSize = itemSizeCache.get(key);\n                const size = typeof measuredSize === \"number\" ? measuredSize : this.options.estimateSize(i);\n                const end = start + size;\n                const lane = furthestMeasurement ? furthestMeasurement.lane : i % this.options.lanes;\n                measurements[i] = {\n                    index: i,\n                    start,\n                    size,\n                    end,\n                    key,\n                    lane\n                };\n            }\n            this.measurementsCache = measurements;\n            return measurements;\n        }, {\n            key:  true && \"getMeasurements\",\n            debug: ()=>this.options.debug\n        });\n        this.calculateRange = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getMeasurements(),\n                this.getSize(),\n                this.getScrollOffset()\n            ], (measurements, outerSize, scrollOffset)=>{\n            return this.range = measurements.length > 0 && outerSize > 0 ? calculateRange({\n                measurements,\n                outerSize,\n                scrollOffset\n            }) : null;\n        }, {\n            key:  true && \"calculateRange\",\n            debug: ()=>this.options.debug\n        });\n        this.getIndexes = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.options.rangeExtractor,\n                this.calculateRange(),\n                this.options.overscan,\n                this.options.count\n            ], (rangeExtractor, range, overscan, count)=>{\n            return range === null ? [] : rangeExtractor({\n                startIndex: range.startIndex,\n                endIndex: range.endIndex,\n                overscan,\n                count\n            });\n        }, {\n            key:  true && \"getIndexes\",\n            debug: ()=>this.options.debug\n        });\n        this.indexFromElement = (node)=>{\n            const attributeName = this.options.indexAttribute;\n            const indexStr = node.getAttribute(attributeName);\n            if (!indexStr) {\n                console.warn(`Missing attribute name '${attributeName}={index}' on measured element.`);\n                return -1;\n            }\n            return parseInt(indexStr, 10);\n        };\n        this._measureElement = (node, entry)=>{\n            const index = this.indexFromElement(node);\n            const item = this.measurementsCache[index];\n            if (!item) {\n                return;\n            }\n            const key = item.key;\n            const prevNode = this.elementsCache.get(key);\n            if (prevNode !== node) {\n                if (prevNode) {\n                    this.observer.unobserve(prevNode);\n                }\n                this.observer.observe(node);\n                this.elementsCache.set(key, node);\n            }\n            if (node.isConnected) {\n                this.resizeItem(index, this.options.measureElement(node, entry, this));\n            }\n        };\n        this.resizeItem = (index, size)=>{\n            const item = this.measurementsCache[index];\n            if (!item) {\n                return;\n            }\n            const itemSize = this.itemSizeCache.get(item.key) ?? item.size;\n            const delta = size - itemSize;\n            if (delta !== 0) {\n                if (this.shouldAdjustScrollPositionOnItemSizeChange !== void 0 ? this.shouldAdjustScrollPositionOnItemSizeChange(item, delta, this) : item.start < this.getScrollOffset() + this.scrollAdjustments) {\n                    if ( true && this.options.debug) {\n                        console.info(\"correction\", delta);\n                    }\n                    this._scrollToOffset(this.getScrollOffset(), {\n                        adjustments: this.scrollAdjustments += delta,\n                        behavior: void 0\n                    });\n                }\n                this.pendingMeasuredCacheIndexes.push(item.index);\n                this.itemSizeCache = new Map(this.itemSizeCache.set(item.key, size));\n                this.notify(false);\n            }\n        };\n        this.measureElement = (node)=>{\n            if (!node) {\n                this.elementsCache.forEach((cached, key)=>{\n                    if (!cached.isConnected) {\n                        this.observer.unobserve(cached);\n                        this.elementsCache.delete(key);\n                    }\n                });\n                return;\n            }\n            this._measureElement(node, void 0);\n        };\n        this.getVirtualItems = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.memo)(()=>[\n                this.getIndexes(),\n                this.getMeasurements()\n            ], (indexes, measurements)=>{\n            const virtualItems = [];\n            for(let k = 0, len = indexes.length; k < len; k++){\n                const i = indexes[k];\n                const measurement = measurements[i];\n                virtualItems.push(measurement);\n            }\n            return virtualItems;\n        }, {\n            key:  true && \"getVirtualItems\",\n            debug: ()=>this.options.debug\n        });\n        this.getVirtualItemForOffset = (offset)=>{\n            const measurements = this.getMeasurements();\n            if (measurements.length === 0) {\n                return void 0;\n            }\n            return (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(measurements[findNearestBinarySearch(0, measurements.length - 1, (index)=>(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(measurements[index]).start, offset)]);\n        };\n        this.getOffsetForAlignment = (toOffset, align)=>{\n            const size = this.getSize();\n            const scrollOffset = this.getScrollOffset();\n            if (align === \"auto\") {\n                if (toOffset <= scrollOffset) {\n                    align = \"start\";\n                } else if (toOffset >= scrollOffset + size) {\n                    align = \"end\";\n                } else {\n                    align = \"start\";\n                }\n            }\n            if (align === \"start\") {\n                toOffset = toOffset;\n            } else if (align === \"end\") {\n                toOffset = toOffset - size;\n            } else if (align === \"center\") {\n                toOffset = toOffset - size / 2;\n            }\n            const scrollSizeProp = this.options.horizontal ? \"scrollWidth\" : \"scrollHeight\";\n            const scrollSize = this.scrollElement ? \"document\" in this.scrollElement ? this.scrollElement.document.documentElement[scrollSizeProp] : this.scrollElement[scrollSizeProp] : 0;\n            const maxOffset = scrollSize - size;\n            return Math.max(Math.min(maxOffset, toOffset), 0);\n        };\n        this.getOffsetForIndex = (index, align = \"auto\")=>{\n            index = Math.max(0, Math.min(index, this.options.count - 1));\n            const item = this.measurementsCache[index];\n            if (!item) {\n                return void 0;\n            }\n            const size = this.getSize();\n            const scrollOffset = this.getScrollOffset();\n            if (align === \"auto\") {\n                if (item.end >= scrollOffset + size - this.options.scrollPaddingEnd) {\n                    align = \"end\";\n                } else if (item.start <= scrollOffset + this.options.scrollPaddingStart) {\n                    align = \"start\";\n                } else {\n                    return [\n                        scrollOffset,\n                        align\n                    ];\n                }\n            }\n            const toOffset = align === \"end\" ? item.end + this.options.scrollPaddingEnd : item.start - this.options.scrollPaddingStart;\n            return [\n                this.getOffsetForAlignment(toOffset, align),\n                align\n            ];\n        };\n        this.isDynamicMode = ()=>this.elementsCache.size > 0;\n        this.cancelScrollToIndex = ()=>{\n            if (this.scrollToIndexTimeoutId !== null && this.targetWindow) {\n                this.targetWindow.clearTimeout(this.scrollToIndexTimeoutId);\n                this.scrollToIndexTimeoutId = null;\n            }\n        };\n        this.scrollToOffset = (toOffset, { align = \"start\", behavior } = {})=>{\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            this._scrollToOffset(this.getOffsetForAlignment(toOffset, align), {\n                adjustments: void 0,\n                behavior\n            });\n        };\n        this.scrollToIndex = (index, { align: initialAlign = \"auto\", behavior } = {})=>{\n            index = Math.max(0, Math.min(index, this.options.count - 1));\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            const offsetAndAlign = this.getOffsetForIndex(index, initialAlign);\n            if (!offsetAndAlign) return;\n            const [offset, align] = offsetAndAlign;\n            this._scrollToOffset(offset, {\n                adjustments: void 0,\n                behavior\n            });\n            if (behavior !== \"smooth\" && this.isDynamicMode() && this.targetWindow) {\n                this.scrollToIndexTimeoutId = this.targetWindow.setTimeout(()=>{\n                    this.scrollToIndexTimeoutId = null;\n                    const elementInDOM = this.elementsCache.has(this.options.getItemKey(index));\n                    if (elementInDOM) {\n                        const [latestOffset] = (0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.notUndefined)(this.getOffsetForIndex(index, align));\n                        if (!(0,_utils_js__WEBPACK_IMPORTED_MODULE_0__.approxEqual)(latestOffset, this.getScrollOffset())) {\n                            this.scrollToIndex(index, {\n                                align,\n                                behavior\n                            });\n                        }\n                    } else {\n                        this.scrollToIndex(index, {\n                            align,\n                            behavior\n                        });\n                    }\n                });\n            }\n        };\n        this.scrollBy = (delta, { behavior } = {})=>{\n            this.cancelScrollToIndex();\n            if (behavior === \"smooth\" && this.isDynamicMode()) {\n                console.warn(\"The `smooth` scroll behavior is not fully supported with dynamic size.\");\n            }\n            this._scrollToOffset(this.getScrollOffset() + delta, {\n                adjustments: void 0,\n                behavior\n            });\n        };\n        this.getTotalSize = ()=>{\n            var _a;\n            const measurements = this.getMeasurements();\n            let end;\n            if (measurements.length === 0) {\n                end = this.options.paddingStart;\n            } else {\n                end = this.options.lanes === 1 ? ((_a = measurements[measurements.length - 1]) == null ? void 0 : _a.end) ?? 0 : Math.max(...measurements.slice(-this.options.lanes).map((m)=>m.end));\n            }\n            return Math.max(end - this.options.scrollMargin + this.options.paddingEnd, 0);\n        };\n        this._scrollToOffset = (offset, { adjustments, behavior })=>{\n            this.options.scrollToFn(offset, {\n                behavior,\n                adjustments\n            }, this);\n        };\n        this.measure = ()=>{\n            this.itemSizeCache = /* @__PURE__ */ new Map();\n            this.notify(false);\n        };\n        this.setOptions(opts);\n    }\n}\nconst findNearestBinarySearch = (low, high, getCurrentValue, value)=>{\n    while(low <= high){\n        const middle = (low + high) / 2 | 0;\n        const currentValue = getCurrentValue(middle);\n        if (currentValue < value) {\n            low = middle + 1;\n        } else if (currentValue > value) {\n            high = middle - 1;\n        } else {\n            return middle;\n        }\n    }\n    if (low > 0) {\n        return low - 1;\n    } else {\n        return 0;\n    }\n};\nfunction calculateRange({ measurements, outerSize, scrollOffset }) {\n    const count = measurements.length - 1;\n    const getOffset = (index)=>measurements[index].start;\n    const startIndex = findNearestBinarySearch(0, count, getOffset, scrollOffset);\n    let endIndex = startIndex;\n    while(endIndex < count && measurements[endIndex].end < scrollOffset + outerSize){\n        endIndex++;\n    }\n    return {\n        startIndex,\n        endIndex\n    };\n}\n //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js":
/*!***************************************************************!*\
  !*** ./node_modules/@tanstack/virtual-core/dist/esm/utils.js ***!
  \***************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   approxEqual: () => (/* binding */ approxEqual),\n/* harmony export */   debounce: () => (/* binding */ debounce),\n/* harmony export */   memo: () => (/* binding */ memo),\n/* harmony export */   notUndefined: () => (/* binding */ notUndefined)\n/* harmony export */ });\nfunction memo(getDeps, fn, opts) {\n    let deps = opts.initialDeps ?? [];\n    let result;\n    return ()=>{\n        var _a, _b, _c, _d;\n        let depTime;\n        if (opts.key && ((_a = opts.debug) == null ? void 0 : _a.call(opts))) depTime = Date.now();\n        const newDeps = getDeps();\n        const depsChanged = newDeps.length !== deps.length || newDeps.some((dep, index)=>deps[index] !== dep);\n        if (!depsChanged) {\n            return result;\n        }\n        deps = newDeps;\n        let resultTime;\n        if (opts.key && ((_b = opts.debug) == null ? void 0 : _b.call(opts))) resultTime = Date.now();\n        result = fn(...newDeps);\n        if (opts.key && ((_c = opts.debug) == null ? void 0 : _c.call(opts))) {\n            const depEndTime = Math.round((Date.now() - depTime) * 100) / 100;\n            const resultEndTime = Math.round((Date.now() - resultTime) * 100) / 100;\n            const resultFpsPercentage = resultEndTime / 16;\n            const pad = (str, num)=>{\n                str = String(str);\n                while(str.length < num){\n                    str = \" \" + str;\n                }\n                return str;\n            };\n            console.info(`%c⏱ ${pad(resultEndTime, 5)} /${pad(depEndTime, 5)} ms`, `\n            font-size: .6rem;\n            font-weight: bold;\n            color: hsl(${Math.max(0, Math.min(120 - 120 * resultFpsPercentage, 120))}deg 100% 31%);`, opts == null ? void 0 : opts.key);\n        }\n        (_d = opts == null ? void 0 : opts.onChange) == null ? void 0 : _d.call(opts, result);\n        return result;\n    };\n}\nfunction notUndefined(value, msg) {\n    if (value === void 0) {\n        throw new Error(`Unexpected undefined${msg ? `: ${msg}` : \"\"}`);\n    } else {\n        return value;\n    }\n}\nconst approxEqual = (a, b)=>Math.abs(a - b) < 1;\nconst debounce = (targetWindow, fn, ms)=>{\n    let timeoutId;\n    return function(...args) {\n        targetWindow.clearTimeout(timeoutId);\n        timeoutId = targetWindow.setTimeout(()=>fn.apply(this, args), ms);\n    };\n};\n //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS91dGlscy5qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsU0FBU0EsS0FBS0MsT0FBTyxFQUFFQyxFQUFFLEVBQUVDLElBQUk7SUFDN0IsSUFBSUMsT0FBT0QsS0FBS0UsV0FBVyxJQUFJLEVBQUU7SUFDakMsSUFBSUM7SUFDSixPQUFPO1FBQ0wsSUFBSUMsSUFBSUMsSUFBSUMsSUFBSUM7UUFDaEIsSUFBSUM7UUFDSixJQUFJUixLQUFLUyxHQUFHLElBQUssRUFBQ0wsS0FBS0osS0FBS1UsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJTixHQUFHTyxJQUFJLENBQUNYLEtBQUksR0FBSVEsVUFBVUksS0FBS0MsR0FBRztRQUN4RixNQUFNQyxVQUFVaEI7UUFDaEIsTUFBTWlCLGNBQWNELFFBQVFFLE1BQU0sS0FBS2YsS0FBS2UsTUFBTSxJQUFJRixRQUFRRyxJQUFJLENBQUMsQ0FBQ0MsS0FBS0MsUUFBVWxCLElBQUksQ0FBQ2tCLE1BQU0sS0FBS0Q7UUFDbkcsSUFBSSxDQUFDSCxhQUFhO1lBQ2hCLE9BQU9aO1FBQ1Q7UUFDQUYsT0FBT2E7UUFDUCxJQUFJTTtRQUNKLElBQUlwQixLQUFLUyxHQUFHLElBQUssRUFBQ0osS0FBS0wsS0FBS1UsS0FBSyxLQUFLLE9BQU8sS0FBSyxJQUFJTCxHQUFHTSxJQUFJLENBQUNYLEtBQUksR0FBSW9CLGFBQWFSLEtBQUtDLEdBQUc7UUFDM0ZWLFNBQVNKLE1BQU1lO1FBQ2YsSUFBSWQsS0FBS1MsR0FBRyxJQUFLLEVBQUNILEtBQUtOLEtBQUtVLEtBQUssS0FBSyxPQUFPLEtBQUssSUFBSUosR0FBR0ssSUFBSSxDQUFDWCxLQUFJLEdBQUk7WUFDcEUsTUFBTXFCLGFBQWFDLEtBQUtDLEtBQUssQ0FBQyxDQUFDWCxLQUFLQyxHQUFHLEtBQUtMLE9BQU0sSUFBSyxPQUFPO1lBQzlELE1BQU1nQixnQkFBZ0JGLEtBQUtDLEtBQUssQ0FBQyxDQUFDWCxLQUFLQyxHQUFHLEtBQUtPLFVBQVMsSUFBSyxPQUFPO1lBQ3BFLE1BQU1LLHNCQUFzQkQsZ0JBQWdCO1lBQzVDLE1BQU1FLE1BQU0sQ0FBQ0MsS0FBS0M7Z0JBQ2hCRCxNQUFNRSxPQUFPRjtnQkFDYixNQUFPQSxJQUFJWCxNQUFNLEdBQUdZLElBQUs7b0JBQ3ZCRCxNQUFNLE1BQU1BO2dCQUNkO2dCQUNBLE9BQU9BO1lBQ1Q7WUFDQUcsUUFBUUMsSUFBSSxDQUNWLENBQUMsSUFBSSxFQUFFTCxJQUFJRixlQUFlLEdBQUcsRUFBRSxFQUFFRSxJQUFJTCxZQUFZLEdBQUcsR0FBRyxDQUFDLEVBQ3hELENBQUM7Ozt1QkFHYyxFQUFFQyxLQUFLVSxHQUFHLENBQ3ZCLEdBQ0FWLEtBQUtXLEdBQUcsQ0FBQyxNQUFNLE1BQU1SLHFCQUFxQixNQUMxQyxjQUFjLENBQUMsRUFDakJ6QixRQUFRLE9BQU8sS0FBSyxJQUFJQSxLQUFLUyxHQUFHO1FBRXBDO1FBQ0NGLENBQUFBLEtBQUtQLFFBQVEsT0FBTyxLQUFLLElBQUlBLEtBQUtrQyxRQUFRLEtBQUssT0FBTyxLQUFLLElBQUkzQixHQUFHSSxJQUFJLENBQUNYLE1BQU1HO1FBQzlFLE9BQU9BO0lBQ1Q7QUFDRjtBQUNBLFNBQVNnQyxhQUFhQyxLQUFLLEVBQUVDLEdBQUc7SUFDOUIsSUFBSUQsVUFBVSxLQUFLLEdBQUc7UUFDcEIsTUFBTSxJQUFJRSxNQUFNLENBQUMsb0JBQW9CLEVBQUVELE1BQU0sQ0FBQyxFQUFFLEVBQUVBLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQztJQUNoRSxPQUFPO1FBQ0wsT0FBT0Q7SUFDVDtBQUNGO0FBQ0EsTUFBTUcsY0FBYyxDQUFDQyxHQUFHQyxJQUFNbkIsS0FBS29CLEdBQUcsQ0FBQ0YsSUFBSUMsS0FBSztBQUNoRCxNQUFNRSxXQUFXLENBQUNDLGNBQWM3QyxJQUFJOEM7SUFDbEMsSUFBSUM7SUFDSixPQUFPLFNBQVMsR0FBR0MsSUFBSTtRQUNyQkgsYUFBYUksWUFBWSxDQUFDRjtRQUMxQkEsWUFBWUYsYUFBYUssVUFBVSxDQUFDLElBQU1sRCxHQUFHbUQsS0FBSyxDQUFDLElBQUksRUFBRUgsT0FBT0Y7SUFDbEU7QUFDRjtBQU1FLENBQ0YsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYWktaW50ZXJ2aWV3ZXIvLi9ub2RlX21vZHVsZXMvQHRhbnN0YWNrL3ZpcnR1YWwtY29yZS9kaXN0L2VzbS91dGlscy5qcz80OTcyIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIG1lbW8oZ2V0RGVwcywgZm4sIG9wdHMpIHtcbiAgbGV0IGRlcHMgPSBvcHRzLmluaXRpYWxEZXBzID8/IFtdO1xuICBsZXQgcmVzdWx0O1xuICByZXR1cm4gKCkgPT4ge1xuICAgIHZhciBfYSwgX2IsIF9jLCBfZDtcbiAgICBsZXQgZGVwVGltZTtcbiAgICBpZiAob3B0cy5rZXkgJiYgKChfYSA9IG9wdHMuZGVidWcpID09IG51bGwgPyB2b2lkIDAgOiBfYS5jYWxsKG9wdHMpKSkgZGVwVGltZSA9IERhdGUubm93KCk7XG4gICAgY29uc3QgbmV3RGVwcyA9IGdldERlcHMoKTtcbiAgICBjb25zdCBkZXBzQ2hhbmdlZCA9IG5ld0RlcHMubGVuZ3RoICE9PSBkZXBzLmxlbmd0aCB8fCBuZXdEZXBzLnNvbWUoKGRlcCwgaW5kZXgpID0+IGRlcHNbaW5kZXhdICE9PSBkZXApO1xuICAgIGlmICghZGVwc0NoYW5nZWQpIHtcbiAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuICAgIGRlcHMgPSBuZXdEZXBzO1xuICAgIGxldCByZXN1bHRUaW1lO1xuICAgIGlmIChvcHRzLmtleSAmJiAoKF9iID0gb3B0cy5kZWJ1ZykgPT0gbnVsbCA/IHZvaWQgMCA6IF9iLmNhbGwob3B0cykpKSByZXN1bHRUaW1lID0gRGF0ZS5ub3coKTtcbiAgICByZXN1bHQgPSBmbiguLi5uZXdEZXBzKTtcbiAgICBpZiAob3B0cy5rZXkgJiYgKChfYyA9IG9wdHMuZGVidWcpID09IG51bGwgPyB2b2lkIDAgOiBfYy5jYWxsKG9wdHMpKSkge1xuICAgICAgY29uc3QgZGVwRW5kVGltZSA9IE1hdGgucm91bmQoKERhdGUubm93KCkgLSBkZXBUaW1lKSAqIDEwMCkgLyAxMDA7XG4gICAgICBjb25zdCByZXN1bHRFbmRUaW1lID0gTWF0aC5yb3VuZCgoRGF0ZS5ub3coKSAtIHJlc3VsdFRpbWUpICogMTAwKSAvIDEwMDtcbiAgICAgIGNvbnN0IHJlc3VsdEZwc1BlcmNlbnRhZ2UgPSByZXN1bHRFbmRUaW1lIC8gMTY7XG4gICAgICBjb25zdCBwYWQgPSAoc3RyLCBudW0pID0+IHtcbiAgICAgICAgc3RyID0gU3RyaW5nKHN0cik7XG4gICAgICAgIHdoaWxlIChzdHIubGVuZ3RoIDwgbnVtKSB7XG4gICAgICAgICAgc3RyID0gXCIgXCIgKyBzdHI7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICAgIH07XG4gICAgICBjb25zb2xlLmluZm8oXG4gICAgICAgIGAlY+KPsSAke3BhZChyZXN1bHRFbmRUaW1lLCA1KX0gLyR7cGFkKGRlcEVuZFRpbWUsIDUpfSBtc2AsXG4gICAgICAgIGBcbiAgICAgICAgICAgIGZvbnQtc2l6ZTogLjZyZW07XG4gICAgICAgICAgICBmb250LXdlaWdodDogYm9sZDtcbiAgICAgICAgICAgIGNvbG9yOiBoc2woJHtNYXRoLm1heChcbiAgICAgICAgICAwLFxuICAgICAgICAgIE1hdGgubWluKDEyMCAtIDEyMCAqIHJlc3VsdEZwc1BlcmNlbnRhZ2UsIDEyMClcbiAgICAgICAgKX1kZWcgMTAwJSAzMSUpO2AsXG4gICAgICAgIG9wdHMgPT0gbnVsbCA/IHZvaWQgMCA6IG9wdHMua2V5XG4gICAgICApO1xuICAgIH1cbiAgICAoX2QgPSBvcHRzID09IG51bGwgPyB2b2lkIDAgOiBvcHRzLm9uQ2hhbmdlKSA9PSBudWxsID8gdm9pZCAwIDogX2QuY2FsbChvcHRzLCByZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5mdW5jdGlvbiBub3RVbmRlZmluZWQodmFsdWUsIG1zZykge1xuICBpZiAodmFsdWUgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBFcnJvcihgVW5leHBlY3RlZCB1bmRlZmluZWQke21zZyA/IGA6ICR7bXNnfWAgOiBcIlwifWApO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxufVxuY29uc3QgYXBwcm94RXF1YWwgPSAoYSwgYikgPT4gTWF0aC5hYnMoYSAtIGIpIDwgMTtcbmNvbnN0IGRlYm91bmNlID0gKHRhcmdldFdpbmRvdywgZm4sIG1zKSA9PiB7XG4gIGxldCB0aW1lb3V0SWQ7XG4gIHJldHVybiBmdW5jdGlvbiguLi5hcmdzKSB7XG4gICAgdGFyZ2V0V2luZG93LmNsZWFyVGltZW91dCh0aW1lb3V0SWQpO1xuICAgIHRpbWVvdXRJZCA9IHRhcmdldFdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IGZuLmFwcGx5KHRoaXMsIGFyZ3MpLCBtcyk7XG4gIH07XG59O1xuZXhwb3J0IHtcbiAgYXBwcm94RXF1YWwsXG4gIGRlYm91bmNlLFxuICBtZW1vLFxuICBub3RVbmRlZmluZWRcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlscy5qcy5tYXBcbiJdLCJuYW1lcyI6WyJtZW1vIiwiZ2V0RGVwcyIsImZuIiwib3B0cyIsImRlcHMiLCJpbml0aWFsRGVwcyIsInJlc3VsdCIsIl9hIiwiX2IiLCJfYyIsIl9kIiwiZGVwVGltZSIsImtleSIsImRlYnVnIiwiY2FsbCIsIkRhdGUiLCJub3ciLCJuZXdEZXBzIiwiZGVwc0NoYW5nZWQiLCJsZW5ndGgiLCJzb21lIiwiZGVwIiwiaW5kZXgiLCJyZXN1bHRUaW1lIiwiZGVwRW5kVGltZSIsIk1hdGgiLCJyb3VuZCIsInJlc3VsdEVuZFRpbWUiLCJyZXN1bHRGcHNQZXJjZW50YWdlIiwicGFkIiwic3RyIiwibnVtIiwiU3RyaW5nIiwiY29uc29sZSIsImluZm8iLCJtYXgiLCJtaW4iLCJvbkNoYW5nZSIsIm5vdFVuZGVmaW5lZCIsInZhbHVlIiwibXNnIiwiRXJyb3IiLCJhcHByb3hFcXVhbCIsImEiLCJiIiwiYWJzIiwiZGVib3VuY2UiLCJ0YXJnZXRXaW5kb3ciLCJtcyIsInRpbWVvdXRJZCIsImFyZ3MiLCJjbGVhclRpbWVvdXQiLCJzZXRUaW1lb3V0IiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@tanstack/virtual-core/dist/esm/utils.js\n");

/***/ })

};
;